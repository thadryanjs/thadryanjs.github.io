---
author: Thadryan
title: "Stats Python in a Hurry Part 2: Visualization"
date: 2022-12-12
description: Transferring my R data viz knowledge back to my first language.
bibliography: Part2.bib
toc: true
---

# Data Visualization

```{python}

import pandas as pd
import numpy as np
import statsmodels.api as sm
import seaborn as sns
import matplotlib.pyplot as plt
```

```{python}
df = sm.datasets.get_rdataset("mtcars", "datasets", cache = True).data

df.head()
```


Seaborn seems to be the most efficient way to get decent looking exploratory plots in a hurry.

## Line Plot

```{python}
sns.lineplot(df, x = "mpg", y = "disp")
```

### Line Plot by factor 

Use the `hue` argument to break out factors into separate lines.

```{python}
sns.lineplot(df, x = "mpg", y = "disp", hue = "am")
```

### Line plot with linear trend

Mean/CI are automatic if you melt the df.

```{python}
df_long = pd.melt(df, id_vars = "cyl", value_vars = "mpg")

df_long
```

```{python}
sns.lineplot(df_long, x = "cyl", y = "value")
```

Or, use `lmplot` to git a linear model like you'd get with `geom_smooth(method = lm)`.

```{python}
sns.lmplot(df, x = "mpg", y = "disp")
```

## Box Plot

```{python}
sns.boxplot(df, x = "cyl", y = "mpg")
```

## Histogram

```{python}
sns.histplot(df, x = "wt")
```

## Density Plot

```{python}
sns.kdeplot(df, x = "disp")
```

## Heatmap

```{python}
sns.heatmap(df[["disp", "hp"]])
```

## Multiple Variable Plots

### KDE

```{python}
sns.kdeplot(df.loc[:, ["mpg", "wt"]])
```

### Lineplot

```{python}
sns.lineplot(df.loc[:, ["mpg", "wt"]])
```

## Faceting 

```{python}
# create three empty spots
grid = sns.FacetGrid(data = df, col = "cyl", col_wrap=2)

# puts a historgram on each of them
grid.map(sns.histplot, "wt")
```

The initial display is automatic. If you want to show the same plot again, access the `figure` property of the object.

```{python}
# just typing it out gives the object metadata
grid
```

```{python}
grid.figure
```

## Tweaking Plots

### Axis Labels

The plot we made of weight and mpg had mostly unusable x tick labels. Let's revist it.

```{python}
p_line = sns.lineplot(df.loc[:, ["mpg", "wt"]])
p_line.figure 
```

The syntax is a little awkward. Essentially there is a set method, and you use a get method to retrieve the labels to pass into it, specifying a rotation.

```{python}
# set what you get from the get method v--here
p_line.set_xticklabels(p_line.get_xticklabels(), rotation = 45)
p_line.figure
```

They still conflict a little. We can make them a little smaller overall. The technique is the same, just setting a different property.

```{python}
p_line.set_xticklabels(p_line.get_xticklabels(), size = 5)
p_line.figure
```

### Title

```{python}
p_line.set(title = "0_o")

p_line.figure
```

### Color Schemes

#### Discrete

Seaborn lets you preview color palettes by calling them as a function argument to `sns.color_palette`.

```{python}
sns.color_palette("dark")
```

The plotting functions will then have arguments for color scheming:

```{python}
p_box = sns.boxplot(df, x = "cyl", y = "mpg", palette = "dark")
```

#### Continuous

```{python}
sns.color_palette("mako", as_cmap = True)
```

```{python}
sns.heatmap(df[["disp", "hp"]], cmap = "mako")
```
